#include <iostream>
#include <queue>
#include <thread>
#include <random>
#include <condition_variable>
#include <atomic>

std::queue<int> temperatureQueue;
std::mutex queueMutex;
std::condition_variable queueCV;
std::atomic<bool> isThread1Running(true);

bool shouldWakeUp()
{
    return !temperatureQueue.empty() || !isThread1Running;
}

void pushTemperature(int temperature)
{
    // TODO: Implement the logic to push temperature onto the queue
    // using a mutex and condition variable for synchronization.
	 // Make sure to notify the consumer thread after pushing the temperature.
	 // 
	 //     1. Acquire the lock on the queueMutex using std::unique_lock.
	 //     2. Wait until the condition variable queueCV is signaled and the size of the temperatureQueue is less than 10.
	 //     3. Push the temperature value onto the temperatureQueue.
	 //     4. Print a message indicating that Thread 1 pushed the temperature value onto the queue.
	 //     5. Notify all threads waiting on the condition variable queueCV.
}

void thread1()
{
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<int> dist(1, 50);

    for (int i = 0; i < 100; ++i)
    {
        std::this_thread::sleep_for(std::chrono::milliseconds(100)); // Simulate some processing time

        int temperature = dist(gen);
        pushTemperature(temperature);
    }

    // TODO: Set the flag to indicate that thread1 has completed its task.
    // Notify the consumer thread to wake up.
}

void convertAndReportTemperature()
{
   // TODO:
   //
   // 1. Enter a loop while the isThread1Running flag is true or the temperatureQueue is not empty.
   // 2. Acquire the lock on the queueMutex.
   // 3. Wait until the condition variable queueCV is signaled and either the temperatureQueue is not empty or isThread1Running is true.
   // 4. If the temperatureQueue is not empty:
   //     a. Retrieve the front temperature value from the temperatureQueue.
   //     b. Remove the front temperature value from the temperatureQueue.
   //     c. Release the lock on the queueMutex.
   //     d. Call the convertTemperature function with the retrieved temperature value.
   // 5. Repeat the loop.
}

int main()
{
    std::thread t1(thread1);
    std::thread t2(convertAndReportTemperature);

    t1.join();
    t2.join();

    std::cout << "Threads completed." << std::endl;

    return 0;
}
